<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:materialConverters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
                    xmlns:reactiveUi="http://reactiveui.net"
                    xmlns:markdig="clr-namespace:Markdig.Wpf;assembly=Markdig.Wpf"
                    xmlns:rack="clr-namespace:Rack">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rack.Wpf;component/DataGridEditor/Theme.DataGridEditor.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Кисти MahApps переопределены для задания цветовой схемы окон Metro в соответствии
         с цветовой схемой MaterialDesignInXaml. -->
    <SolidColorBrush x:Key="MahApps.Brushes.Highlight" Color="{DynamicResource Primary700}" />
    <SolidColorBrush x:Key="MahApps.Brushes.AccentBase" Color="{DynamicResource Primary600}" />
    <SolidColorBrush x:Key="MahApps.Brushes.Accent" Color="{DynamicResource Primary500}" />
    <SolidColorBrush x:Key="MahApps.Brushes.Accent2" Color="{DynamicResource Primary400}" />
    <SolidColorBrush x:Key="MahApps.Brushes.Accent3" Color="{DynamicResource Primary300}" />
    <SolidColorBrush x:Key="MahApps.Brushes.Accent4" Color="{DynamicResource Primary200}" />
    <SolidColorBrush x:Key="MahApps.Brushes.WindowTitle" Color="{DynamicResource Primary700}" />
    <SolidColorBrush x:Key="MahApps.Brushes.AccentSelectedColor" Color="{DynamicResource Primary500Foreground}" />
    <LinearGradientBrush x:Key="MahApps.Brushes.Progress" EndPoint="0.001,0.5" StartPoint="1.002,0.5">
        <GradientStop Color="{DynamicResource Primary700}" Offset="0" />
        <GradientStop Color="{DynamicResource Primary300}" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="MahApps.Brushes.CheckmarkFill" Color="{DynamicResource Primary500}" />
    <SolidColorBrush x:Key="MahApps.Brushes.RightArrowFill" Color="{DynamicResource Primary500}" />
    <SolidColorBrush x:Key="MahApps.Brushes.IdealForegroundColorBrush"
                     Color="{DynamicResource Primary500Foreground}" />
    <SolidColorBrush x:Key="MahApps.Brushes.IdealForegroundDisabledBrush" Color="{DynamicResource Primary500}"
                     Opacity="0.4" />
    <SolidColorBrush x:Key="MahApps.Brushes.ToggleSwitchButton.OnSwitch.Win10"
                     Color="{DynamicResource Primary500}" />
    <SolidColorBrush x:Key="MahApps.Brushes.ToggleSwitchButton.OnSwitchMouseOver.Win10"
                     Color="{DynamicResource Primary400}" />
    <SolidColorBrush x:Key="MahApps.Brushes.ToggleSwitchButton.ThumbIndicatorChecked.Win10"
                     Color="{DynamicResource Primary500Foreground}" />

    <!-- Стили Dragablz переопределены, чтобы соответствовать MaterialDesignInXaml. -->
    <Style TargetType="{x:Type dragablz:TabablzControl}"
           BasedOn="{StaticResource MaterialDesignTabablzControlStyle}" />

    <!-- Стиль главного окна. -->
    <Style TargetType="{x:Type mah:MetroWindow}">
        <Setter Property="WindowTitleBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Language" Value="ru" />

        <!-- Рекомендуемые опции MaterialDesignInXaml -->
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="TextElement.FontWeight" Value="Regular" />
        <Setter Property="TextElement.FontSize"
                Value="{Binding Mode.Body2FontSize, Source={x:Static rack:App.Settings}}" />
        <Setter Property="FontSize"
                Value="{Binding Mode.Body2FontSize, Source={x:Static rack:App.Settings}}" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
        <Setter Property="FontFamily" Value="{materialDesign:MaterialDesignFont}" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <!--<Setter Property="Icon" Value="icon.ico" />-->
    </Style>

    <!-- Стиль диалоговых окон. -->
    <Style TargetType="{x:Type mah:MetroWindow}" x:Key="DialogWindow"
           BasedOn="{StaticResource {x:Type mah:MetroWindow}}">
        <Style.Resources>
            <!-- Используется другая цветовая схема, чтобы более явно выделить диалог 
                 на фоне главного окна. -->
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary
                        Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />
                </ResourceDictionary.MergedDictionaries>
            </ResourceDictionary>
        </Style.Resources>
    </Style>

    <!-- Стили Markdig.Wpf -->
    <Style TargetType="{x:Type FlowDocument}" x:Key="{x:Static markdig:Styles.DocumentStyleKey}">
        <Setter Property="FontFamily" Value="{materialDesign:MaterialDesignFont}" />
        <Setter Property="TextAlignment" Value="Left" />
        <Style.Resources>
            <!-- Так как в документе MarkDig изображения представлены кнопками, необходимо убрать
                 заданный MaterialDesignInXaml размер, чтобы изображения могли иметь нормальный размер. -->
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Height" Value="NaN" />
            </Style>
        </Style.Resources>
    </Style>

    <!-- Переопределение типографических стилей для разных режимов отображения -->
    <Style TargetType="{x:Type Hyperlink}"
           BasedOn="{StaticResource MaterialDesignBody1Hyperlink}"
           x:Key="MaterialDesignBody1Hyperlink">
        <Setter Property="FontSize" Value="{Binding Mode.Body1FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource MaterialDesignBody1TextBlock}"
           x:Key="MaterialDesignBody1TextBlock">
        <Setter
            Property="FontSize"
            Value="{Binding Mode.Body1FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type Hyperlink}"
           BasedOn="{StaticResource MaterialDesignBody2Hyperlink}"
           x:Key="MaterialDesignBody2Hyperlink">
        <Setter Property="FontSize" Value="{Binding Mode.Body2FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource MaterialDesignBody2TextBlock}"
           x:Key="MaterialDesignBody2TextBlock">
        <Setter
            Property="FontSize"
            Value="{Binding Mode.Body2FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type Hyperlink}"
           BasedOn="{StaticResource MaterialDesignSubtitle1Hyperlink}"
           x:Key="MaterialDesignSubtitle1Hyperlink">
        <Setter Property="FontSize" Value="{Binding Mode.Subtitle1FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type TextBlock}"
           x:Key="MaterialDesignSubtitle1TextBlock"
           BasedOn="{StaticResource MaterialDesignSubtitle1TextBlock}">
        <Style.Resources>
            <Style TargetType="Hyperlink" BasedOn="{StaticResource MaterialDesignSubtitle1Hyperlink}" />
        </Style.Resources>
        <Setter Property="FontSize" Value="{Binding Mode.Subtitle1FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type Hyperlink}"
           BasedOn="{StaticResource MaterialDesignSubtitle2Hyperlink}"
           x:Key="MaterialDesignSubtitle2Hyperlink">
        <Setter Property="FontSize" Value="{Binding Mode.Subtitle2FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>
    <Style TargetType="{x:Type TextBlock}"
           x:Key="MaterialDesignSubtitle2TextBlock"
           BasedOn="{StaticResource MaterialDesignSubtitle2TextBlock}">
        <Setter Property="FontSize" Value="{Binding Mode.Subtitle2FontSize, Source={x:Static rack:App.Settings}}" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignBody2TextBlock}" />

    <Style TargetType="ToolTip" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Setter Property="FontSize" Value="{Binding Mode.ToolTipSize, Source={x:Static rack:App.Settings}}" />
    </Style>

    <!-- Фикс бага MaterialDesignInXaml 3.2.0 (PR #2100) -->
    <Style TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource MaterialDesignComboBox}">
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!-- Стиль заголовков колонок таблиц. -->
    <Style TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
        <!-- ContentTemplate переопределён, чтобы заголовки колонок поддерживали автоперенос 
             текста на новую строку по умолчанию. -->
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        TextWrapping="WrapWithOverflow"
                        Text="{Binding}"
                        Style="{StaticResource MaterialDesignBody1TextBlock}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MaterialDesignDataGrid}">
        <Setter Property="FontSize" Value="{Binding Mode.Body2FontSize, Source={x:Static rack:App.Settings}}"></Setter>
    </Style>

    <!-- GroupBox Expander -->
    <materialConverters:MathMultipleConverter x:Key="MathMlpMultipleConverter" Operation="Multiply" />
    <Style x:Key="GroupBoxExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Unchecked" To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-180" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                                Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-180" />
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                            Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <materialDesign:PackIcon Kind="ChevronDown" x:Name="ExpandPath" RenderTransformOrigin="0.5,0.5"
                                                 Height="24" Width="24" Foreground="{TemplateBinding Foreground}">
                            <materialDesign:PackIcon.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </materialDesign:PackIcon.RenderTransform>
                        </materialDesign:PackIcon>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GroupBoxExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource MaterialDesignExpanderDownHeaderStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              VerticalAlignment="Center" />
                            <ToggleButton Grid.Column="1"
                                          VerticalAlignment="Center"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource GroupBoxExpanderToggleButton}"
                                          Opacity="1" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GroupBoxExpander" TargetType="Expander" BasedOn="{StaticResource MaterialDesignExpander}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
        <Setter Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryMid" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" To="Expanded">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                                           Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0"
                                                                        Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             Storyboard.TargetName="PART_Content" To="1"
                                                             Duration="0:0:0.3" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Collapsed">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                                           Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3"
                                                                        Value="{x:Static Visibility.Hidden}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             Storyboard.TargetName="PART_Content" To="0"
                                                             Duration="0:0:0.3" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="ContentPanel" To="1" Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPanel"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         Storyboard.TargetName="ContentPanel" To="0" Duration="0" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPanel"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Name="PART_Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{Binding Path=Background, ElementName=PART_ColorZone}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <DockPanel Background="{TemplateBinding Background}">
                            <materialDesign:ColorZone UseLayoutRounding="True" x:Name="PART_ColorZone"
                                                      DockPanel.Dock="Top" Padding="{TemplateBinding Padding}"
                                                      Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static materialConverters:ShadowConverter.Instance}}"
                                                      materialDesign:ShadowAssist.ShadowEdges="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowEdges)}"
                                                      Mode="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ColorZoneAssist.Mode)}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ToggleButton Name="HeaderSite"
                                              Focusable="False"
                                              Foreground="{DynamicResource MaterialDesignDarkForeground}"
                                              IsTabStop="False"
                                              BorderThickness="0" Cursor="Hand"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{DynamicResource GroupBoxExpanderDownHeaderStyle}"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                            </materialDesign:ColorZone>
                            <StackPanel Name="ContentPanel"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        Margin="{TemplateBinding Padding}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Width="Auto"
                                        DockPanel.Dock="Bottom">
                                <StackPanel.Height>
                                    <MultiBinding Converter="{StaticResource MathMlpMultipleConverter}">
                                        <Binding ElementName="PART_Content" Path="ActualHeight" />
                                        <Binding ElementName="PART_Content" Path="Opacity" />
                                    </MultiBinding>
                                </StackPanel.Height>
                                <ContentPresenter
                                    Name="PART_Content"
                                    Focusable="False"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    DockPanel.Dock="Bottom" />
                            </StackPanel>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToolBar" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
    </Style>

    <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
        <!-- Как правило, клавиатурный фокус на GroupBox не имеет смысла.  -->
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <Style TargetType="ItemsControl" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <!-- Как правило, клавиатурный фокус на ItemsControl не имеет смысла.  -->
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <Style TargetType="reactiveUi:RoutedViewHost">
        <!-- Как правило, клавиатурный фокус на RoutedViewHost не имеет смысла.  -->
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <Style x:Key="MaterialDesignDataGridComboBoxColumnStyle"
           TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource MaterialDesignValidationErrorBrush}"
                            Margin="-1 0 -1 -4"
                            BorderThickness="0 0 0 2"
                            Padding="1 0 1 2">
                        <AdornedElementPlaceholder />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MaterialDesignDataGridComboBoxEditingColumnStyle"
           TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{DynamicResource MaterialDesignValidationErrorBrush}"
                            Margin="-1 0 -1 -4"
                            BorderThickness="0 0 0 2"
                            Padding="1 0 1 2">
                        <AdornedElementPlaceholder />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type DataGridCheckBoxColumn}" BasedOn="{StaticResource DataGridCheckBoxColumn}">
        <Setter Property="ElementStyle" Value="{DynamicResource MaterialDesignDataGridCheckBoxColumnStyle}" />
        <Setter Property="EditingElementStyle"
                Value="{DynamicResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" />
    </Style>-->

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
           BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
           TargetType="Button">
        <!-- Для кнопок в тулбарах отображение подсказки должно быть
             почти мгновенным. -->
        <Setter Property="ToolTipService.InitialShowDelay" Value="100" />
    </Style>

</ResourceDictionary>